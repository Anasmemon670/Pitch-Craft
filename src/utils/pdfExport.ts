// PDF Export functionality using jsPDF

import { jsPDF } from 'jspdf';
import type { Pitch } from './storage';

export function exportPitchToPDF(pitch: Pitch): void {
  const doc = new jsPDF();
  
  // Set up colors
  const primaryColor = hexToRgb(pitch.colors.primary);
  const textColor = [30, 30, 30]; // Dark gray for text
  
  let yPosition = 20;
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  const contentWidth = pageWidth - (margin * 2);
  
  // Header with gradient background
  doc.setFillColor(primaryColor[0], primaryColor[1], primaryColor[2]);
  doc.rect(0, 0, pageWidth, 45, 'F');
  
  // Startup Name
  doc.setFontSize(28);
  doc.setTextColor(255, 255, 255);
  doc.text(pitch.name, margin, 25);
  
  // Tagline
  doc.setFontSize(12);
  doc.setTextColor(240, 240, 240);
  doc.text(pitch.tagline, margin, 35);
  
  yPosition = 60;
  
  // Section helper function
  const addSection = (title: string, content: string) => {
    // Check if we need a new page
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }
    
    // Section title
    doc.setFontSize(14);
    doc.setTextColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.text(title, margin, yPosition);
    yPosition += 8;
    
    // Section content
    doc.setFontSize(10);
    doc.setTextColor(textColor[0], textColor[1], textColor[2]);
    const lines = doc.splitTextToSize(content, contentWidth);
    doc.text(lines, margin, yPosition);
    yPosition += (lines.length * 5) + 10;
  };
  
  // Add sections
  addSection('🎯 Elevator Pitch', pitch.elevator);
  addSection('⚠️ Problem Statement', pitch.problem);
  addSection('💡 Solution', pitch.solution);
  addSection('👥 Target Audience', pitch.target);
  
  // Add metadata section
  if (yPosition > 240) {
    doc.addPage();
    yPosition = 20;
  }
  
  doc.setFontSize(10);
  doc.setTextColor(120, 120, 120);
  yPosition += 10;
  doc.text(`Industry: ${pitch.industry}`, margin, yPosition);
  yPosition += 6;
  doc.text(`Tone: ${pitch.tone}`, margin, yPosition);
  yPosition += 6;
  doc.text(`Created: ${new Date(pitch.createdAt).toLocaleDateString()}`, margin, yPosition);
  
  // Add color palette section
  yPosition += 15;
  doc.setFontSize(14);
  doc.setTextColor(primaryColor[0], primaryColor[1], primaryColor[2]);
  doc.text('🎨 Brand Colors', margin, yPosition);
  yPosition += 10;
  
  const colors = [
    { name: 'Primary', hex: pitch.colors.primary },
    { name: 'Secondary', hex: pitch.colors.secondary },
    { name: 'Accent', hex: pitch.colors.accent },
  ];
  
  colors.forEach((color, index) => {
    const rgb = hexToRgb(color.hex);
    const xPos = margin + (index * 60);
    
    // Color swatch
    doc.setFillColor(rgb[0], rgb[1], rgb[2]);
    doc.rect(xPos, yPosition, 15, 15, 'F');
    
    // Color info
    doc.setFontSize(8);
    doc.setTextColor(textColor[0], textColor[1], textColor[2]);
    doc.text(color.name, xPos + 18, yPosition + 5);
    doc.setTextColor(120, 120, 120);
    doc.text(color.hex, xPos + 18, yPosition + 10);
  });
  
  // Footer
  const totalPages = doc.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text(
      `Generated by PitchCraft | Page ${i} of ${totalPages}`,
      pageWidth / 2,
      doc.internal.pageSize.getHeight() - 10,
      { align: 'center' }
    );
  }
  
  // Save the PDF
  doc.save(`${pitch.name.replace(/\s+/g, '-')}-Pitch.pdf`);
}

export function exportLandingPageCodeToPDF(pitchName: string, code: string): void {
  const doc = new jsPDF();
  
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  const contentWidth = pageWidth - (margin * 2);
  
  // Header
  doc.setFillColor(79, 70, 229); // #4F46E5
  doc.rect(0, 0, pageWidth, 35, 'F');
  
  doc.setFontSize(20);
  doc.setTextColor(255, 255, 255);
  doc.text(`${pitchName} - Landing Page Code`, margin, 22);
  
  // Code content
  let yPosition = 50;
  doc.setFontSize(8);
  doc.setTextColor(30, 30, 30);
  doc.setFont('courier');
  
  const lines = code.split('\n');
  
  lines.forEach((line, index) => {
    if (yPosition > 280) {
      doc.addPage();
      yPosition = 20;
    }
    
    // Line number
    doc.setTextColor(150, 150, 150);
    doc.text(`${index + 1}`, margin - 5, yPosition, { align: 'right' });
    
    // Code line
    doc.setTextColor(30, 30, 30);
    const trimmedLine = line.substring(0, 100); // Limit line length
    doc.text(trimmedLine, margin + 5, yPosition);
    yPosition += 4;
  });
  
  // Save
  doc.save(`${pitchName.replace(/\s+/g, '-')}-Landing-Code.pdf`);
}

// Helper function to convert hex to RGB
function hexToRgb(hex: string): [number, number, number] {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result
    ? [
        parseInt(result[1], 16),
        parseInt(result[2], 16),
        parseInt(result[3], 16),
      ]
    : [0, 0, 0];
}
